"""
Generated by leslie in shanghai, @leadrive.
Version 2.0
name: basic_functions.py
time: 2019年3月27日09:57:49

kep o mvi
"""
from packages.basic.basic_functions import *
from packages.basic.log import Set_Log

import os
import csv
import logging

#创建日志
log_name = 'run_log.log'
log_path = os.path.abspath('.')
log = Set_Log(log_name, log_path, logger_name='rte')


def Modi_Can_PBCfg(str_CAN_mode, dbcname=''):
	'''
	对Can_PBCfg文件处理，解决bit timing和波特率的灵活配置；
	参数于CSV文件中抽取。
	
	'''
	
	if dbcname:
		file_name = 'pending_file/Can_PBCfg.c'
		gen_filename = 'processed_file/Can_PBCfg.c'
		lines = Read_File(file_name)
		print("# Read source file successfully:" + file_name)
		log.info("# Read source file successfully:" + file_name)
	
		#configure parameters of bit time and baudrate
		lines = Config_Bitime(lines)
		if str_CAN_mode == '1':
			lines = Config_CanID(lines, dbcname)
	
		Write_File(gen_filename, lines)
		print("# Creat a new file in pending_file folder successfully.")
		log.info("Creat a new file in pending_file folder successfully.")
	else:
		pass
	

def Config_CanID(lines, dbcname):
	"""eliminate the bug about CANID:wrong ID, Mask filter and IDtype"""
	try:
		list_line_search = []
		list_messag_name = []
		new_lines = []
		dbcfile_name = dbcname
	
		#achieve id and name from DBC file
		dbclines = Read_File(dbcfile_name)
		list_line_search = Search_Str(dbclines, 'BO_')
		idandnamedic = OutIDandAttriDic(list_line_search, 1, 2)
	
		#judge wethere ID is processed correctly.
		for line in lines:
			for key in idandnamedic.keys():
				if hex(int(key)) in line:
					print("# ID number is Wrong")
					id_number = Correct_ID_DBC(int(key))
					#修改ID
					line = line.replace(hex(int(key)), hex(id_number))
					if 'CAN_STD' in line:
						#修改帧类型
						line = line.replace('CAN_STD', 'CAN_XTD')
					if '0x7FF' in line:
						line = line.replace('0x7FF', '0x1FFFFFFF')
					
			new_lines.append(line)
		print('# Extended mode.ID has been modified！')
		log.info('# Extended mode.ID has been modified！')
		return new_lines
		
	except:
		print('# file is not found!')
		log.info('# file is not found!')
		return lines


def Config_Bitime(lines):
	'''
	依据csv文件配置bitime
	'''
	
	baudrate = 'baudrate'
	PropSeg = 'PropSeg'
	PSEG1 = 'PSEG1'
	PSEG2 = 'PSEG2'
	SJW = 'SJW'
	BRP = 'BRP'
	
	#dic 记录csv文件中参数及其值
	dic = {}
	file_csvname = 'Configuration.csv'
	with open(file_csvname) as file_object:
		reader = csv.reader(file_object)
		header_line = ' '
		while header_line:
			try:
				header_line = next(reader)
				key = header_line[0].strip()
				dic[key] = header_line[1].strip()
			except:
				break
	print("# Read CSV file successfully and relative parameters has been extracted.")
	log.info("# Read CSV file successfully and relative parameters has been extracted.")
	
	#寻找代码所在行数 count
	forestr = 'static CONST (tcx_Can_BaudRateConfigType_tst, CAN_CONST) tcx_Can_BaudRateConfig_acst_0[CAN_NUMBAUDRATE_CONFIG_0]='
	count = Search_code(forestr, lines)
	
	count +=1
	for i in range(count, 10000):
		if len(lines[i])>4:
			count = i
			break
	count += 1
	for i in range(count, 10000):
		if len(lines[i])>4:
			count = i
			break
	print("# The line-number of the code has been found.")
	log.info("# The line-number of the code has been found.")
	
	#删除原本参数内容		
	for i in range(1):
		del lines[count]
	print("# Original Communication parameters have been deleted successfully.")
	log.info("# Original Communication parameters have been deleted successfully.")

	#插入新参数内容
	add_code = []
	for i in sorted(list(range(1)), reverse=True):
		string = '	    {	' + dic[baudrate] + \
		'      ,     ' + str(i) + '  ,     ' + str(i) + \
		'  ,     ' + dic[PropSeg] + ' ,     ' + dic[PSEG1] + \
		'  ,    ' + dic[PSEG2] + '  ,   ' + dic[SJW] + ' ,   ' + \
		dic[BRP] + '  },\n'
		lines.insert(count, string)
	print("# Communication parameters have been updated successfully.")
	log.info("# Communication parameters have been updated successfully.")
	
	return lines
	
	
def Correct_ID_DBC(id_number):
	"""去掉DBC文件格式标志扩展帧的最高位，以显示正确的ID"""
	
	id_number &=0x1FFFFFFF
	
	return id_number


	
	

