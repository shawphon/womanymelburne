"""
Generated by leslie in shanghai, @leadrive.
Version 2.0
name: basic_functions.py
time: 2019年3月20日10:18:32

kep o mvi
"""
from packages.basic.log import Set_Log

import os
import time
import logging


def Search_Substring(lines, substring, start_pos=-1):
	"""search substring in files and return the appropriate position"""
	
	if start_pos == -1:
		cou = start_pos + 1
		start_pos += 1
	else:
		cou = start_pos
	for line in lines[start_pos:]:
		if substring.strip() in line:
			break
		cou += 1
		if cou == len(lines)-1:
			print('Not found the code')
			break
	
	return cou
	
	
def Read_File(file_name):
	"""读取文件内容，返回行列表lines"""
	
	with open(file_name) as file_object:
		lines = file_object.readlines()
#		print(file_name + ": 文件读取成功！\t\t\t\t\t\t#")
		
	return lines
	

def Write_File(file_name, lines):
	"""向指定文件里写入内容lines"""
	
	with open(file_name, 'w') as file_object:
		file_object.writelines(lines)
#		print(file_name + ": 文件写入成功！")
	
	
def Show_File(file_name):
	"""打印指定文件"""
	
	print("##################################\n以下为文件打印：" + 
		"\n##################################")
	with open(file_name) as file_object:
		lines = file_object.readlines()
		for line in lines:
			print(line.rstrip())
	

def Comm_Out(lines, comm_out_code, count_appear=1):
	"""注释对应文件相应代码,返回注释后的代码"""
	
	flag = 0
	for count in range(0,len(lines)):
		if lines[count].strip() == comm_out_code.strip():
			flag += 1
			if count_appear == flag:
				lines[count] = '//' + lines[count]
				#print("注释成功！")
				break
			else:
				print("找到相同代码段，但非需注释的代码！")
	if flag != count_appear:
		print("未找到需注释代码段！请核实注释代码！")
		
	return lines


def Add(lines, add_code, before_code, count_appear=1,offset=0):
	"""为相应文件添加相应代码"""
	
	flag = 0
	for count in range(len(lines)):
		if lines[count].strip() == before_code.strip():
			flag += 1
			if flag == count_appear:
				#print("找到代码添加位置！")
				count += 1
				count += offset
				for i in range(len(add_code)):
					lines.insert(count, add_code[i])
					count += 1
					lines.insert(count, '\n')
					count += 1
				break
			else:
				pass
				
	if flag != count_appear:
		print("Not found the position of before_code, please recheck before_code.")
	
	return lines


def Search_Str(lines, search_str, condi_code=''):
	"""找寻首部为search_str的行,以行字符串返回，返回值为列表lines_search
		同时可以附加寻找的条件:该行是否有特定的子字符串
		BA , BO DBC文件
	"""
	
	lines_search = []
	for line in lines:
		string = line.split()
		if string and string[0].strip() == search_str:
			if not condi_code:
				lines_search.append(line)
			elif condi_code in string:
				lines_search.append(line)
			else:
				pass		
	
	return lines_search
	
	
def Search_code(string, lines):
	"""寻找行代码在列表中的位置"""
	
	count = -1
	
	for line in lines:
		count += 1
		if line.strip() == string.strip():
			break
	
	if count == len(lines)-1:
		print('Not found the code')
	
	return count
	

def Check_File(files_name,files_path='',logger_path=''):
	"""检测是否存在文件"""

	logname = 'run_log.log'
	chk_file_log = Set_Log(logname, logger_path, logger_name='chk_file_log')
	
	for file_name in files_name:
		if not os.path.exists(files_path + file_name):
			print('File ' + file_name + ' is not in ' + files_path +
			'folder'+ ', Please recheck this file.')
			chk_file_log.error('File ' + file_name + ' is not in ' + files_path +
			' folder'+ ', Please recheck this file.')
			time.sleep(5)
			
			exit()

def OutIDandAttriDic(lines_search, pos_id, pos_attribute):
	"""在列表中寻找帧ID及其某个属性，并以字典形式返回 """
	
	idandattridic = {}
	
	for line in lines_search:
		string = line.split()
		if len(string)>max([pos_id, pos_attribute]):
			if ':' in string[pos_attribute]:
				idandattridic[string[pos_id]] = string[pos_attribute].split(':')[0]
			elif ';' in string[pos_attribute]:
				idandattridic[string[pos_id]] = string[pos_attribute].split(';')[0]
			else:
				idandattridic[string[pos_id]] = string[pos_attribute]
			#print(string[pos_id])
			#print(string[pos_attribute].split(':')[0])
			
	return idandattridic

			
copyFileCounts = 0

def Copy_Files(source_dir, target_dir):
	""" copy all files in source director to target director."""
	
	global copyFileCounts
	for f in os.listdir(source_dir):
		sourceF = os.path.join(source_dir, f)
		targetF = os.path.join(target_dir, f)
		if os.path.isfile(sourceF):
			if not os.path.exists(target_dir):
				os.makedirs(target_dir)
			copyFileCounts += 1
			with open(sourceF, 'r') as file_object:
				lines = file_object.readlines()
			with open(targetF, 'w') as file_object:
				file_object.writelines(lines)
	print("counts of copyed files is",copyFileCounts)
				


		
